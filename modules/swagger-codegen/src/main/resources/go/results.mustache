package {{classVarName}}

import (
	"github.com/gophercloud/gophercloud"
    {{#alloperations}}{{#hasQueryPagin}}"github.com/gophercloud/gophercloud/pagination"{{/hasQueryPagin}}{{/alloperations}}
)

type commonResult struct {
	gophercloud.Result
}
{{#imports}}
import ({{/imports}}{{#imports}}
	"{{import}}"{{/imports}}{{#imports}}
)
{{/imports}}
{{#allmodels}}
{{#model}}
{{#isResp}}
{{#isEnum}}
{{#description}}
    // {{{classname}}} : {{{description}}}
{{/description}}

type {{{classname}}} {{^format}}{{dataType}}{{/format}}{{#format}}{{{format}}}{{/format}}
// List of {{{name}}}
const (
	{{#allowableValues}}
	{{#enumVars}}
	{{^-first}}
	{{/-first}}
	{{name}} {{{classname}}} = "{{{value}}}"
	{{/enumVars}}
	{{/allowableValues}}
){{/isEnum}}{{^isEnum}}{{#description}}
// {{{description}}}{{/description}}
type {{classname}} struct {
{{#vars}}
{{^-first}}
{{/-first}}
{{#description}}
	// {{{description}}}
{{/description}}
	{{name}} {{#defaultValue}}{{#vendorExtensions.x-notEqualToJsonDefaultValue}}*{{/vendorExtensions.x-notEqualToJsonDefaultValue}}{{/defaultValue}}{{{datatype}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{baseName}}"{{/withXml}}`
{{/vars}}
}
{{/isEnum}}
{{/isResp}}
{{/model}}
{{/allmodels}}
{{#alloperations}}
{{#operations}}
{{#operation}}
{{#isListContainer}}

type {{{vendorExtensions.x-returnBaseTypeModel}}}s {{{returnType}}}
{{/isListContainer}}
{{#vendorExtensions.isExtractInfo}}
{{#hasQueryParams}}

func Extract{{nickname}}(r pagination.Page) ({{^isListContainer}}{{{returnType}}}{{/isListContainer}}{{#isListContainer}}{{{vendorExtensions.x-returnBaseTypeModel}}}s{{/isListContainer}}, error) {
	var s {{^isListContainer}}{{{returnType}}}{{/isListContainer}}{{#isListContainer}}{{{vendorExtensions.x-returnBaseTypeModel}}}s{{/isListContainer}}
	err := (r.({{nickname}}Page)).ExtractInto(&s)
	return s, err
}

type {{nickname}}Page struct {
	pagination.LinkedPageBase
}

func (r {{nickname}}Page) IsEmpty() (bool, error) {
	s, err := Extract{{nickname}}(r)
{{^vendorExtensions.isExtractInfo}}
	return &s == nil, err
{{/vendorExtensions.isExtractInfo}}
{{#vendorExtensions.isExtractInfo}}
	return len(s) == 0, err
{{/vendorExtensions.isExtractInfo}}
}
{{/hasQueryParams}}
{{/vendorExtensions.isExtractInfo}}
{{^hasQueryParams}}

{{#hasReference}}
type {{nickname}}Result struct {
	commonResult
}
{{/hasReference}}
{{^hasReference}}
type {{nickname}}Result struct {
	gophercloud.ErrResult
}
{{/hasReference}}
{{/hasQueryParams}}
{{/operation}}
{{/operations}}
{{/alloperations}}
{{#allmodels}}
{{#model}}
{{#isExtractInfo}}
{{^isQueryResponse}}

func (r commonResult) Extract{{classname}}Info() (*{{classname}}, error) {
	var s {{classname}}
	err := r.ExtractInto(&s)
	return &s, err
}
{{/isQueryResponse}}
{{#isQueryResponse}}

func Extract{{{nickname}}}(r pagination.Page) ({{classname}}, error) {
	var s {{classname}}
{{#vars}}
	{{#isContainer}}s.{{name}} = make({{{datatype}}}, 0){{/isContainer}}
{{/vars}}
	err := (r.({{{nickname}}}Page)).ExtractInto(&s)
	return &s, err
}
{{/isQueryResponse}}
 {{/isExtractInfo}}
 {{/model}}
 {{/allmodels}}
 {{#alloperations}}
 {{#operations}}
 {{#operation}}
 {{#vendorExtensions.isExtractInfo}}
 {{^hasQueryParams}}

 func (r commonResult) Extract{{vendorExtensions.x-returnBaseTypeModel}}sInfo() (*{{vendorExtensions.x-returnBaseTypeModel}}s, error) {
 	var s {{vendorExtensions.x-returnBaseTypeModel}}s
 	err := r.ExtractInto(&s)
 	return &s, err
 }
{{/hasQueryParams}}
{{/vendorExtensions.isExtractInfo}}
{{/operation}}
{{/operations}}
{{/alloperations}}